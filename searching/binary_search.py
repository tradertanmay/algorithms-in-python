# -*- coding: utf-8 -*-
"""Binary_Search.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aEq-Yw2zL0jFYXSM2vmFVz9tAKeSuX9T
"""

# binary search
# binary search without recursion
# list should be sorted
# divide the list into two parts according to index
#i.e  mid  = low + (high-low)//2, low = 0, high = len(a) -1
# pick left
# if key <  left split (highest) ----
'''if key < a[mid]:
      high = mid-1
  elif key > a[mid]:
    low = mid+1
  else:
    return(mid)
    '''
# pick right
#  if key > left split(highest)
# if say pick left
# then  again split till we reach  2 elements
# while lo <=hi:
# either left or element should be  otherwise no search found

def binary_search(a,key):
  low = 0
  high = len(a)-1
  mid = low + (high-low)//2
  while low <=high:
    if key < a[mid]:
      high = mid-1
    elif key > a[mid]:
      low = mid+1
    else:
      return(mid)
a = [2,3,11,43]
binary_search(a,3)

